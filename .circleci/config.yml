version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>


  revert-migrations:
    description: Revert the last migration if it didnt successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            FAILURE=$(curl -k --request GET https://kvdb.io/LiSroTFUWTHpJf4YLDNu6R/DB_MIGRATION_<< parameters.id >>)
            echo $FAILURE
            if [[ "$FAILURE" == "failure" ]]
            then
              pwd
              ls -la
              export TYPEORM_HOST=ec2-3-7-68-126.ap-south-1.compute.amazonaws.com
              echo $TYPEORM_HOST
              npm run migrations:revert
            fi
          when: << parameters.when >>

orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build Back-end 
          command: |
             # Your code here 
             cd backend
             npm install
             npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0       # Docker image here
    steps:
      - checkout       # Checkout code from git
      - restore_cache:          # Restore from cache
          keys: [test-frontend]
      - run:          # Your job code here
          name: Install dependencies
          working_directory: ./frontend
          command:  |
                npm install
      - run:
          name: Frontend test
          working_directory: ./frontend
          command:  |
                npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
 
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:   
          keys: [test-backend]
      - run:
          name: Install dependencies
          working_directory: ./backend
          command:  |
                npm install
      - run:
          name: Backend test
          working_directory: ./backend
          command:  |
                npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command:  |
                npm install
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command:   |
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Install dependencies
          working_directory: ./backend
          command:  |
                npm install

      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command:   |
                npm install --save-dev webpack@5.74.0
                npm update mkdirp --depth 6
                npm update path-parse --depth 3
                npm update kind-of --depth 14
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      -   checkout
      - run:
          name: Install Dependencies
          command: yum install -y tar gzip
      - run:
          name: Check connection
          command: aws s3 ls
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: aws cloudformation deploy --template-file backend.yml --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
                aws cloudformation deploy \
                --template-file frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    executor: python  
    steps:
      -  checkout
      - add_ssh_keys:
          fingerprints: ["c7:6f:80:5f:2d:2d:78:73:58:8a:3f:14:09:ec:ee:1a"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
     

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install NPM
          working_directory: ./backend
          command:  |
                npm install
      - run:
          name: Run migrations
          working_directory: ./backend
          command:  |
                # export TYPEORM_HOST=ec2-3-94-197-78.compute-1.amazonaws.com
                # echo $TYPEORM_HOST
                npm run migrations > migration_status.txt
                cat migration_status.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl  https://kvdb.io/LiSroTFUWTHpJf4YLDNu6R/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7} -d "success" -k
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl  https://kvdb.io/LiSroTFUWTHpJf4YLDNu6R/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7} -d "failure" -k
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail
      # - revert-migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_success     
     

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_GET_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL >> "frontend/.env"
            cd frontend
            echo ENVIRONMENT=development  >> ".env" 
            echo NODE_ENV=development >> ".env"
            export ENVIRONMENT=development
            export NODE_ENV=development
            cat .env
            npm i
            npm run build   
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
            echo "Done"
                    
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:47:c2:35:34:ae:45:70:01:03:94:e2:37:80:f6:9c"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
            mv node_modules dist
            # export TYPEORM_HOST=ec2-3-7-68-126.ap-south-1.compute.amazonaws.com
            # echo $TYPEORM_HOST
            # echo ENVIRONMENT=production >> "dist/.env"
            # echo NODE_ENV=production >> "dist/.env"
            # echo VERSION=1 >> "dist/.env"
            # echo TYPEORM_CONNECTION=postgres >> "dist/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "dist/.env"
            # echo TYPEORM_ENTITIES=./modules/domain/**/*.entity.js >> "dist/.env"
            # echo TYPEORM_MIGRATIONS=./migrations/*.js >> "dist/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "dist/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "dist/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "dist/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "dist/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "dist/.env"
            # echo NODE_PATH=/home/ubuntu/dist/node_modules >> "dist/.env"
            tar -czvf artefacts.tar.gz ./dist
            pwd
            cd ..
            pwd
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
# ===============
            # zip -r dist.zip dist
            # mkdir -p ../.circleci/ansible/roles/deploy/files/
            # mv dist.zip ../.circleci/ansible/roles/deploy/files/
            # pwd
            # echo [web] > inventory.txt
            # echo 3.110.158.23 >> inventory.txt
            # ansible-playbook -i inventory.txt ../.circleci/ansible/deploy-backend.yml
            # echo "Done"
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]